openapi: 3.0.0
info:
  title: Especificación API para la CNBV
  description: |
    Especificación Técnica del API para la CNBV
    para mayor información, ir a
    [sitio web de la CNBV](https://www.gob.mx/cnbv)
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: info@cnbv.gob.mx
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: "1.0.0"
tags:
  - name: user-resource
    description: User Resource
  - name: user-jwt-controller
    description: User JWT Controller
  - name: profile-info-resource
    description: Profile Info Resource
  - name: account-resource
    description: Account Resource
  - name: persona-resource
    description: Persona Resource
paths:
  /api/_search/personas:
    get:
      tags:
        - persona-resource
      summary: searchPersona
      operationId: searchPersonaUsingGET
      parameters:
        - name: query
          in: query
          description: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number of the requested page
          required: false
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: Size of a page
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: >-
            Sorting criteria in the format: property(,asc|desc). Default sort
            order is ascending. Multiple sort criteria are supported.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Persona'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/account:
    get:
      tags:
        - account-resource
      summary: getAccount
      operationId: getAccountUsingGET
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - account-resource
      summary: saveAccount
      operationId: saveAccountUsingPOST
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        $ref: '#/components/requestBodies/UserDTO'
  /api/account/change-password:
    post:
      tags:
        - account-resource
      summary: changePassword
      operationId: changePasswordUsingPOST
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: password
        required: true
  /api/account/reset-password/finish:
    post:
      tags:
        - account-resource
      summary: finishPasswordReset
      operationId: finishPasswordResetUsingPOST
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyAndPasswordVM'
        description: keyAndPassword
        required: true
  /api/account/reset-password/init:
    post:
      tags:
        - account-resource
      summary: requestPasswordReset
      operationId: requestPasswordResetUsingPOST
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: mail
        required: true
  /api/activate:
    get:
      tags:
        - account-resource
      summary: activateAccount
      operationId: activateAccountUsingGET
      parameters:
        - name: key
          in: query
          description: key
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/authenticate:
    get:
      tags:
        - account-resource
      summary: isAuthenticated
      operationId: isAuthenticatedUsingGET
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - user-jwt-controller
      summary: authorize
      operationId: authorizeUsingPOST
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JWTToken'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginVM'
        description: loginVM
        required: true
  /api/personas:
    get:
      tags:
        - persona-resource
      summary: getAllPersona
      operationId: getAllPersonaUsingGET
      parameters:
        - name: page
          in: query
          description: Page number of the requested page
          required: false
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: Size of a page
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: >-
            Sorting criteria in the format: property(,asc|desc). Default sort
            order is ascending. Multiple sort criteria are supported.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Persona'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - persona-resource
      summary: createPersona
      operationId: createPersonaUsingPOST
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Persona'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        $ref: '#/components/requestBodies/Persona'
    put:
      tags:
        - persona-resource
      summary: updatePersona
      operationId: updatePersonaUsingPUT
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Persona'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        $ref: '#/components/requestBodies/Persona'
  '/api/personas/{id}':
    get:
      tags:
        - persona-resource
      summary: getPersona
      operationId: getPersonaUsingGET
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Persona'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - persona-resource
      summary: deletePersona
      operationId: deletePersonaUsingDELETE
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /api/profile-info:
    get:
      tags:
        - profile-info-resource
      summary: getActiveProfiles
      operationId: getActiveProfilesUsingGET
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProfileInfoVM'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /api/register:
    post:
      tags:
        - account-resource
      summary: registerAccount
      operationId: registerAccountUsingPOST
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedUserVM'
        description: managedUserVM
        required: true
  /api/users:
    get:
      tags:
        - user-resource
      summary: getAllUsers
      operationId: getAllUsersUsingGET
      parameters:
        - name: page
          in: query
          description: Page number of the requested page
          required: false
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: Size of a page
          required: false
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          description: >-
            Sorting criteria in the format: property(,asc|desc). Default sort
            order is ascending. Multiple sort criteria are supported.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - user-resource
      summary: createUser
      operationId: createUserUsingPOST
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        $ref: '#/components/requestBodies/UserDTO'
    put:
      tags:
        - user-resource
      summary: updateUser
      operationId: updateUserUsingPUT
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      requestBody:
        $ref: '#/components/requestBodies/UserDTO'
  /api/users/authorities:
    get:
      tags:
        - user-resource
      summary: getAuthorities
      operationId: getAuthoritiesUsingGET
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  '/api/users/{login}':
    get:
      tags:
        - user-resource
      summary: getUser
      operationId: getUserUsingGET
      parameters:
        - name: login
          in: path
          description: login
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - user-resource
      summary: deleteUser
      operationId: deleteUserUsingDELETE
      parameters:
        - name: login
          in: path
          description: login
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
servers:
  - description: Servidor de Pruebas en swaggerhub
    url: https://virtserver.swaggerhub.com/danimaniarqsoft/cnbv/1.0.0
  - url: https://api.dads.infotec.mx
  - url: http://localhost:8080
components:
  requestBodies:
    UserDTO:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserDTO'
      description: userDTO
      required: true
    Persona:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Persona'
      description: persona
      required: true
  schemas:
    JWTToken:
      type: object
      properties:
        id_token:
          type: string
    KeyAndPasswordVM:
      type: object
      properties:
        key:
          type: string
        newPassword:
          type: string
    LoginVM:
      type: object
      required:
        - password
        - username
      properties:
        password:
          type: string
          minLength: 4
          maxLength: 100
        rememberMe:
          type: boolean
        username:
          type: string
          minLength: 1
          maxLength: 50
    ManagedUserVM:
      type: object
      required:
        - login
      properties:
        activated:
          type: boolean
        authorities:
          type: array
          items:
            type: string
        createdBy:
          type: string
        createdDate:
          type: string
          format: date-time
        email:
          type: string
          minLength: 5
          maxLength: 100
        firstName:
          type: string
          minLength: 0
          maxLength: 50
        id:
          type: integer
          format: int64
        imageUrl:
          type: string
          minLength: 0
          maxLength: 256
        langKey:
          type: string
          minLength: 2
          maxLength: 6
        lastModifiedBy:
          type: string
        lastModifiedDate:
          type: string
          format: date-time
        lastName:
          type: string
          minLength: 0
          maxLength: 50
        login:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[_''.@A-Za-z0-9-]*$'
        password:
          type: string
          minLength: 4
          maxLength: 100
    Persona:
      type: object
      properties:
        activo:
          type: boolean
        edad:
          type: integer
          format: int32
        fechaCreacion:
          type: string
          format: date
        id:
          type: integer
          format: int64
        nombre:
          type: string
    ProfileInfoVM:
      type: object
      properties:
        activeProfiles:
          type: array
          items:
            type: string
        ribbonEnv:
          type: string
    User:
      type: object
      required:
        - activated
        - login
      properties:
        activated:
          type: boolean
        email:
          type: string
          minLength: 5
          maxLength: 100
        firstName:
          type: string
          minLength: 0
          maxLength: 50
        id:
          type: integer
          format: int64
        imageUrl:
          type: string
          minLength: 0
          maxLength: 256
        langKey:
          type: string
          minLength: 2
          maxLength: 6
        lastName:
          type: string
          minLength: 0
          maxLength: 50
        login:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[_''.@A-Za-z0-9-]*$'
        resetDate:
          type: string
          format: date-time
    UserDTO:
      type: object
      required:
        - login
      properties:
        activated:
          type: boolean
        authorities:
          type: array
          items:
            type: string
        createdBy:
          type: string
        createdDate:
          type: string
          format: date-time
        email:
          type: string
          minLength: 5
          maxLength: 100
        firstName:
          type: string
          minLength: 0
          maxLength: 50
        id:
          type: integer
          format: int64
        imageUrl:
          type: string
          minLength: 0
          maxLength: 256
        langKey:
          type: string
          minLength: 2
          maxLength: 6
        lastModifiedBy:
          type: string
        lastModifiedDate:
          type: string
          format: date-time
        lastName:
          type: string
          minLength: 0
          maxLength: 50
        login:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[_''.@A-Za-z0-9-]*$'
